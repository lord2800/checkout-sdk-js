{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/embedded-checkout/parse-origin.ts","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","standard_error_StandardError","_super","StandardError","message","_this","this","type","setPrototypeOf","__proto__","_newTarget","Error","captureStackTrace","stack","external_tslib_","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","GiftCertificateActionType","PaymentMethodActionType","BillingAddressActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","EmbeddedCheckoutEventType","ConfigActionType","BillingAddressActionCreator","_requestSender","continueAsGuest","credentials","options","store","Observable_","observer","state","getState","checkout","getCheckout","missing_data_error","MissingCheckout","customer","getCustomer","isGuest","standard_error","billingAddressRequestBody","billingAddress","getBillingAddress","country","existingBillingAddressRequestBody","next","data_store_","billing_address_actions","ContinueAsGuestRequested","_createOrUpdateBillingAddress","id","then","_a","body","ContinueAsGuestSucceeded","complete","catch","response","error","ContinueAsGuestFailed","updateAddress","address","UpdateBillingAddressRequested","email","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","checkoutId","createAddress","DEFAULT_PARAMS","include","join","BillingAddressRequestSender","timeout","url","headers","Accept","content_type","JsonV1","post","params","put","CountryActionCreator","_countryRequestSender","loadCountries","country_action_types","data","CountryRequestSender","_config","Accept-Language","locale","OrderFinalizationNotRequiredError","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","strategy","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_internal_address_equal","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_methodId","_googlePayOptions","googlepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","_getPayment","cardInformation","displayWallet","statusCode","MissingPayment","card_information","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","endpoint","ChasePayEventType","ButtonType","ButtonColor","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","createButton","onClick","buttonType","buttonColor","Short","Default","_googlePaymentsClient","_googlePaymentDataRequest","googlePaymentsClient","googlePaymentDataRequest","isReadyToPay","allowedPaymentMethods","result","loadPaymentData","parseResponse","tokenizedPayload","_postForm","updateBillingAddress","cardInfo","remoteBillingAddress","googlePayAddressMapped","_mapGooglePayAddressToBillingAddress","_getCardInformation","cardType","lastFour","postPaymentData","details","payment_type","hasShippingAddress","googlePay","googlePayPaymentDataRequest","_getGooglePayClient","google","payments","api","PaymentsClient","firstName","split","slice","lastName","company","companyName","address3","address4","address5","city","locality","stateOrProvince","administrativeArea","stateOrProvinceCode","phone","phoneNumber","customFields","GooglePayScriptLoader","GooglePayBraintreeInitializer","getGooglePaymentComponent","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","platformToken","merchantInfo","authJwt","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","createPaymentDataRequest","KlarnaScriptLoader","Klarna","Credit","MasterpassPaymentStrategy","_masterpassScriptLoader","_masterpassClient","_createMasterpassPayload","allowedCardTypes","toFixed","cartId","suppressShippingAddress","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","braintreeSdkCreator","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","googlepay_payment_processor","googlepay_script_loader","googlepay_braintree_initializer","wepay_payment_strategy","masterpass_payment_strategy","masterpass_script_loader","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","parseOrigin","test","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","createElement","href","hostname","port","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","__webpack_exports__","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","isIframeEvent","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","CheckoutButtonStrategy","containerId","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","keys","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","MasterpassButtonStrategy","_signInButton","_createSignInButton","parentNode","removeChild","buttonContainer","querySelector","src","appendChild","cartAmount","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","OrderActionType","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","tslib__WEBPACK_IMPORTED_MODULE_0__","createError","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","DEFAULT_RESPONSE","RequestError","Array","isArray","joinErrors","detail","title","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_3__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","indexOf","splice","trigger","origin","_is_iframe_event__WEBPACK_IMPORTED_MODULE_2__","_common_utility__WEBPACK_IMPORTED_MODULE_1__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_0__","postMessage","setTarget","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","checkout_actions","order_actions","LoadOrderSucceeded","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","_configureStyles","attach","show","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","parse_origin","is_iframe_event","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","getConsignmentByAddress","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","lineItemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","LoadShippingOptionsSucceeded","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","existingConsignment","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","_removeLineItems","_createOrUpdateConsignment","_addLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","_getConsignmentRequestBody","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","existingItem","sharedItem","find","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","_googlePay","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","PaymentMethodInvalidError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","InvalidArgumentError","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","MasterpassCustomerStrategy","masterpassOptions","Masterpass","DefaultCustomerStrategy","_customerActionCreator","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","TimeoutError","ContentType","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","INTERNAL_USE_ONLY","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","PaypalScriptLoader","isCustomError","IframeEmbeddedCheckoutMessenger","postComplete","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","RemoteCheckoutSynchronizationError","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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xB,WAAIO,GACAltB,EACAse,EACAuN,EACAG,EACA,IAAImB,GAAmBxC,MAI/BH,EAASmC,SAAS,SAAU,WACxB,WAAIS,GACAptB,EACAse,KAIRkM,EAASmC,SAAS,UAAW,WACzB,WAAIU,GACArtB,EACAse,KAIRkM,EAASmC,SAAS,UAAW,WACzB,WAAIW,GACAttB,EACAse,EACAC,KAIRiM,EAASmC,SAAS,SAAU,WACxB,WAAIY,GACAvtB,EACAse,EACAC,KAIRiM,EAASmC,SAAS,gBAAiB,WAC/B,WAAIa,GACAxtB,EACAse,EACA,IAAImP,GAAA,EAAmB9C,MAI/BH,EAASmC,SAAS,sBAAuB,WACrC,WAAIa,GACAxtB,EACAse,EACA,IAAImP,GAAA,EAAmB9C,MAI/BH,EAASmC,SAAS,UAAW,WACzB,WAAIe,GACA1tB,EACAse,EACAC,EACAljB,OAAAsyB,EAAA,iBAAAtyB,MAIRmvB,EAASmC,SAAS,WAAY,WAC1B,WAAIiB,GACA5tB,EACAusB,EACAjO,EACAC,EACAsN,EACAY,EACAlC,EACA,IAAIsD,GAAmBlD,MAI/BH,EAASmC,SAAS,wBAAyB,WACvC,WAAImB,GACA9tB,EACAse,KAIRkM,EAASmC,SAAS,YAAa,WAC3B,WAAIoB,GACA/tB,EACAse,EACAC,EACAsN,EACAhB,KAIRL,EAASmC,SAAS,kBAAmB,WACjC,WAAIqB,GACAhuB,EACAse,EACAC,EACAsN,EACAhB,KAIRL,EAASmC,SAAS,wBAAyB,WACvC,WAAIqB,GACAhuB,EACAse,EACAC,EACAsN,EACAhB,GACA,KAIRL,EAASmC,SAAS,wBAAyB,WACvC,WAAIsB,GACAjuB,EACAusB,EACAV,EACAY,EACAlO,EACAD,EACAjjB,OAAA6yB,GAAA,EAAA7yB,CAA4CsvB,EAAcJ,GAC1D,IAAI4D,GAAA,EAAyBxD,MAIrCH,EAASmC,SAAS,WAAY,WAC1B,WAAIyB,GACApuB,EACAusB,EACAjO,EACAC,EACAsN,EACAY,EACAlC,EACA,IAAI8D,GAAA,EAAqBhzB,OAAAuvB,EAAA,gBAAAvvB,IACzB,IAAIizB,GAA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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 167);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","export enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n}\n\nexport interface EmbeddedCheckoutError {\n    message: string;\n    type?: string;\n    subtype?: string;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError } from '../../../common/error/errors';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    OrderActionCreator, OrderRequestBody } from '../../../order';\n\nimport { GooglePayPaymentInitializeOptions, GooglePayPaymentProcessor } from './';\nimport {\n    GooglePaymentData,\n    PaymentMethodData,\n} from './googlepay';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        this._googlePayOptions = options.googlepay;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                if (!options.googlepay) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = options.googlepay.walletButton && document.getElementById(options.googlepay.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return Promise.all([\n            this._googlePayPaymentProcessor.deinitialize(),\n        ]).then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype AddressFormat = 'FULL' | 'MIN';\ntype TotalPriceStatus = 'ESTIMATED' | 'FINAL' | 'NOT_CURRENTLY_KNOWN';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV1>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayDataRequestV1 {\n    merchantInfo: {\n        authJwt?: string,\n    };\n    transactionInfo: {\n        currencyCode: string,\n        totalPriceStatus: TotalPriceStatus,\n        totalPrice: string,\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean,\n        billingAddressFormat: AddressFormat,\n    };\n    emailRequired: boolean;\n    phoneNumberRequired: boolean;\n    shippingAddressRequired: boolean;\n}\n\nexport interface GooglePayPaymentDataRequestV1 {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    enviroment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: string;\n    };\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV1): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: TokenizeType;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    cardInfo: {\n        cardClass: string;\n        cardDescription: string;\n        cardDetails: string;\n        cardImageUri: string;\n        cardNetwork: string;\n        billingAddress: GooglePayAddress;\n    };\n    paymentMethodToken: {\n        token: string;\n        tokenizationType: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    address4: string;\n    address5: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { PaymentMethodActionCreator } from '../..';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV1,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePaymentsClient?: GooglePayClient;\n    private _methodId?: string;\n    private _googlePaymentDataRequest?: GooglePayPaymentDataRequestV1;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _requestSender: RequestSender,\n        private _billingAddressActionCreator: BillingAddressActionCreator\n    ) { }\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: () => {},\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePaymentsClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePaymentsClient.createButton({\n            buttonColor: ButtonColor.Default,\n            buttonType: ButtonType.Short,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePaymentsClient || !this._googlePaymentDataRequest || !this._googlePaymentDataRequest) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const googlePaymentsClient = this._googlePaymentsClient;\n        const googlePaymentDataRequest = this._googlePaymentDataRequest;\n\n        return this._googlePaymentsClient.isReadyToPay({\n            allowedPaymentMethods: this._googlePaymentDataRequest.allowedPaymentMethods,\n        }).then(response => {\n            if (response.result) {\n                return googlePaymentsClient.loadPaymentData(googlePaymentDataRequest);\n            } else {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n        });\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizedPayload => this._postForm(tokenizedPayload))\n            .then(() => this.updateBillingAddress(paymentData.cardInfo.billingAddress));\n    }\n\n    private updateBillingAddress(billingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(billingAddress, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<any>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._methodId,\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _configureWallet(): Promise<void> {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const testMode = paymentMethod.config.testMode;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ])\n                    .then(([googlePay, googlePayPaymentDataRequest]) => {\n                        this._googlePaymentsClient = this._getGooglePayClient(googlePay, testMode);\n                        this._googlePaymentDataRequest = googlePayPaymentDataRequest;\n                    })\n                    .catch((error: Error) => {\n                        throw error;\n                    });\n            });\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _mapGooglePayAddressToBillingAddress(address: GooglePayAddress, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3 + address.address4 + address.address5,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayDataRequestV1,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV1,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV1> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData.platformToken,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        return this._googlePaymentInstance.parseResponse(paymentData);\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        platformToken: string,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV1 {\n        if (!platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePaymentDataRequest: GooglePayDataRequestV1 = {\n            merchantInfo: {\n                authJwt: platformToken,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._googlePaymentInstance.createPaymentDataRequest(googlePaymentDataRequest);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentProcessor, GooglePayScriptLoader } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSdkCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(getScriptLoader()),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                requestSender,\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender))\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","import { InvalidArgumentError } from '../common/error/errors';\n\nexport default function parseOrigin(url: string): string {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return `${anchor.protocol}//${anchor.hostname}` + (anchor.port ? `:${anchor.port}` : '');\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/form-poster\");","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","export enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    MASTERPASS = 'masterpass',\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction> {\n        return store => {\n            const meta = { methodId: options.methodId };\n            const { paymentMethods } = store.getState();\n            const paymentMethod = paymentMethods.getPaymentMethod(options.methodId);\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                paymentMethod ?\n                    empty() :\n                    this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize()\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized: { [key: string]: boolean } = {};\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized[options.containerId] = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isInitialized = {};\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport { Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../payment/strategies/masterpass';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy extends CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.querySelector(`#${containerId}`);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonMethodType, CheckoutButtonStrategy, MasterpassButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseOrigin(sourceOrigin);\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import parseOrigin from './parse-origin';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseOrigin(targetOrigin);\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._iframeCreator.createFrame(this._options.url, this._options.containerId)\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseOrigin(iframe.src)) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport parseOrigin from './parse-origin';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseOrigin(options.url);\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","module.exports = require(\"iframe-resizer\");","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: true,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    MasterpassCustomerStrategy,\n} from './strategies';\nimport SquareCustomerStrategy from './strategies/square-customer-strategy';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n    const scriptLoader = getScriptLoader();\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: K): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutError,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameLoaded(): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow)\n    );\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}