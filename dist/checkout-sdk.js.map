{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/embedded-checkout/parse-origin.ts","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","standard_error_StandardError","_super","StandardError","message","_this","this","type","setPrototypeOf","__proto__","_newTarget","Error","captureStackTrace","stack","external_tslib_","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","InstrumentActionType","CheckoutButtonActionType","CheckoutActionType","EmbeddedCheckoutEventType","CountryActionCreator","_countryRequestSender","loadCountries","options","Observable_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","error","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","OrderFinalizationNotRequiredError","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","MissingCheckout","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_methodId","_googlePayOptions","_getGooglePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","_getPayment","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","MissingPayment","card_information","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","MasterpassPaymentStrategy","_masterpassScriptLoader","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","create_googlepay_payment_processor","googlepay_braintree_initializer","wepay_payment_strategy","masterpass_payment_strategy","masterpass_script_loader","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","OrderActionType","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","tslib__WEBPACK_IMPORTED_MODULE_0__","CheckoutButtonSelector","_checkoutButton","lodash__WEBPACK_IMPORTED_MODULE_1__","isDeinitializing","initializeError","getDeinitializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","errorsReducer","statusesReducer","reducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","ConfigActionType","objectA","objectB","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","args","getKey","cachedValue","getUsedCount","newValue","is_private","cache","set","selectorMethodDecorator","mapToInternalCart","decimalPlaces","amountTransformer","amount_transformer","items","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discount","discountAmount","integerAmount","toInteger","discountNotifications","promotions","notifications","promotion","banners","banner","push","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","physicalItems","lineItem","isShippingRequired","storeCredit","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","PaymentMethodInvalidError","RemoteCheckoutActionType","CountryActionType","ShippingCountryActionType","parseOrigin","url","test","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","createElement","hostname","port","ACKNOWLEDGE","FINALIZE","__webpack_exports__","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","isIframeEvent","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","slice","isMatched","parentMaps_1","maps","CheckoutButtonErrorSelector","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","checkout_button_method_type","CheckoutButtonStrategy","containerId","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","MasterpassButtonStrategy","_signInButton","_createSignInButton","parentNode","removeChild","buttonContainer","querySelector","src","appendChild","cartAmount","GooglePayButtonStrategy","_getMethodId","googlePayButton","createButton","_onPaymentSelectComplete","_onError","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_button_strategy","GOOGLEPAY_BRAINTREE","googlepay_button_strategy","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","mapToInternalLineItems","itemMap","idKey","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","dataReducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_3__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","indexOf","splice","trigger","origin","_is_iframe_event__WEBPACK_IMPORTED_MODULE_2__","_common_utility__WEBPACK_IMPORTED_MODULE_1__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_0__","postMessage","setTarget","CheckoutRequestSender","params","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","JsonV1","include","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","put","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","DEFAULT_PARAMS","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","PaymentMethodActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","PaymentMethodRequestSender","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","predicate","newArray","mergeOrPush","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","parse_origin","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","CheckoutIncludes","consignment_action_creator_ConsignmentActionCreator","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","consignment_actions","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","CustomerStrategyActionCreator","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","customerStrategyReducer","customer_strategy_actions","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","InvalidArgumentError","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","masterpassOptions","Masterpass","GooglePayCustomerStrategy","googlePayOptions","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","googlepay_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","ContentType","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","INTERNAL_USE_ONLY","MissingDataErrorType","MissingDataError","MissingBillingAddress","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","encodeURIComponent","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","googleMerchantId","googleMerchantName","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 174);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"rxjs/observable/defer\");","import { InvalidArgumentError } from '../common/error/errors';\n\nexport default function parseOrigin(url: string): string {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return `${anchor.protocol}//${anchor.hostname}` + (anchor.port ? `:${anchor.port}` : '');\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/request-sender\");","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction> {\n        return store => {\n            const meta = { methodId: options.methodId };\n            const { paymentMethods } = store.getState();\n            const paymentMethod = paymentMethods.getPaymentMethod(options.methodId);\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                paymentMethod ?\n                    empty() :\n                    this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize()\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized: { [key: string]: boolean } = {};\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized[options.containerId] = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isInitialized = {};\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../..';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy extends CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.querySelector(`#${containerId}`);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy extends CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId())\n                .then(() => {\n                    this._walletButton = this._createSignInButton(containerId);\n                })\n            ).then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize());\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport {\n    BraintreePaypalButtonStrategy,\n    CheckoutButtonMethodType,\n    CheckoutButtonStrategy,\n    GooglePayButtonStrategy,\n    MasterpassButtonStrategy,\n    PaypalButtonStrategy\n} from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","module.exports = require(\"rxjs/observable/empty\");","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseOrigin(sourceOrigin);\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import parseOrigin from './parse-origin';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseOrigin(targetOrigin);\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: LoadCountriesAction\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: InstrumentAction\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._iframeCreator.createFrame(this._options.url, this._options.containerId)\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseOrigin(iframe.src)) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport parseOrigin from './parse-origin';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseOrigin(options.url);\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: LoadShippingCountriesAction\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","module.exports = require(\"iframe-resizer\");","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: true,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: K): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.merchantName,\n                merchantId: initializationData.merchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n\n        this._messagePoster.post(message);\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}